C structures are special, large variables which contain several named variables inside. Structures are the basic foundation for objects and classes in C. Structures are used for:

Serialization of data
Passing multiple arguments in and out of functions through a single argument
Data structures such as linked lists, binary trees, and more

Syntax :-
-------
There are basically two syntax for defining a structure in c.

1) struct <structure name> {
    // list of variables.
}

Example :- 
-------

struct point {
    int x;
    int y;
}

2) using typedef keyword.Typedefs allow us to define types with a different name - which can come in handy when dealing with structs and pointers.

typedef struct {
    // list of variables.
} <structure name>;

Example :- 

typedef struct {
    int x;
    char *y // yes struct can have pointers
} pointer;

Pointer To a structure is c :-
---------------------------

We have already learned that a pointer is a variable which points to the address of another variable of any data type like int, char, float etc.
Similarly, we can have a pointer to structures, where a pointer variable can point to the address of a structure variable.

There are two ways of accessing members of structure using pointer:

1)Using indirection (*) operator and dot(.) operator.
 example :-  (*ptr_dog).name - refers to the name of dog
2)Using arrow (->) operator or membership operator.
example :- ptr_dog->name - refers to the name of dog
